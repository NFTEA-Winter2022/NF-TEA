"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployBeaconProxy = void 0;
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const utils_1 = require("./utils");
const initializer_data_1 = require("./utils/initializer-data");
async function deployBeaconProxy(beacon, attachTo, args = [], opts = {}) {
    // infer attachTo's interface
    if (attachTo === undefined || !('bytecode' in attachTo)) {
        throw new upgrades_core_1.UpgradesError(`attachTo must specify a contract abstraction`, () => `Include the contract abstraction for the beacon's current implementation in the attachTo parameter`);
    }
    if (!Array.isArray(args)) {
        opts = args;
        args = [];
    }
    const { deployer } = (0, utils_1.withDefaults)(opts);
    const provider = (0, utils_1.wrapProvider)(deployer.provider);
    const manifest = await upgrades_core_1.Manifest.forNetwork(provider);
    if (opts.kind !== undefined && opts.kind !== 'beacon') {
        throw new upgrades_core_1.DeployBeaconProxyKindError(opts.kind);
    }
    opts.kind = 'beacon';
    const beaconAddress = (0, utils_1.getContractAddress)(beacon);
    if (!(await (0, upgrades_core_1.isBeacon)(provider, beaconAddress))) {
        throw new upgrades_core_1.DeployBeaconProxyUnsupportedError(beaconAddress);
    }
    const data = (0, initializer_data_1.getInitializerData)(attachTo, args, opts.initializer);
    if (await manifest.getAdmin()) {
        (0, upgrades_core_1.logWarning)(`A proxy admin was previously deployed on this network`, [
            `This is not natively used with the current kind of proxy ('beacon').`,
            `Changes to the admin will have no effect on this new proxy.`,
        ]);
    }
    const BeaconProxyFactory = (0, utils_1.getBeaconProxyFactory)(attachTo);
    const proxyDeployment = Object.assign({ kind: opts.kind }, await (0, utils_1.deploy)(deployer, BeaconProxyFactory, beaconAddress, data));
    await manifest.addProxy(proxyDeployment);
    attachTo.address = proxyDeployment.address;
    const contract = new attachTo(proxyDeployment.address);
    contract.transactionHash = proxyDeployment.txHash;
    return contract;
}
exports.deployBeaconProxy = deployBeaconProxy;
//# sourceMappingURL=deploy-beacon-proxy.js.map