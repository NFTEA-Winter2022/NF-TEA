import { EthereumProvider } from './provider';
import { UpgradesError } from './error';
export interface Deployment {
    address: string;
    txHash?: string;
}
export interface DeployOpts {
    /**
     * Timeout in milliseconds to wait for the transaction confirmation when deploying an implementation contract or proxy admin contract. Use `0` to wait indefinitely.
     */
    timeout?: number;
    /**
     * Polling interval in milliseconds between checks for the transaction confirmation when deploying an implementation contract or proxy admin contract.
     */
    pollingInterval?: number;
}
export declare function resumeOrDeploy<T extends Deployment>(provider: EthereumProvider, cached: T | undefined, deploy: () => Promise<T>): Promise<T>;
export declare function waitAndValidateDeployment(provider: EthereumProvider, deployment: Deployment, type?: string, opts?: DeployOpts): Promise<void>;
export declare class TransactionMinedTimeout extends UpgradesError {
    readonly deployment: Deployment;
    constructor(deployment: Deployment, type?: string, configurableTimeout?: boolean);
}
export declare class InvalidDeployment extends Error {
    readonly deployment: Deployment;
    removed: boolean;
    constructor(deployment: Deployment);
    get message(): string;
}
//# sourceMappingURL=deployment.d.ts.map